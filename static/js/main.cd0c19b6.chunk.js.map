{"version":3,"sources":["utils/routesMap.js","components/Main.js","components/Place.js","components/Map.js","components/App.js","reportWebVitals.js","index.js"],"names":["ROUTES_MAP","Main","className","to","Place","place","handlePlaceClick","onClick","properties","name","mapboxgl","workerClass","require","default","Mapbox","ReactMapboxGl","accessToken","Map","props","geojsondata","data","useState","lng","lat","center","setCenter","zoom","setZoom","undefined","setPlace","centerPlace","geometry","coordinates","features","map","feature","i","style","flyToOptions","circleLayout","visibility","circlePaint","circleOnClick","evt","preventDefault","type","lngLat","rating","handleMarkerClick","id","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"024DAAaA,EACF,IADEA,EAEH,OCEK,SAASC,IACpB,OACI,uBAAMC,UAAU,OAAhB,UACI,oBAAIA,UAAU,cAAd,2PACA,cAAC,IAAD,CAAMC,GAAIH,EAAgBE,UAAU,aAApC,iG,oCCNG,SAASE,EAAT,GAA2C,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,iBAQlC,OACI,oBAAIJ,UAAU,iBAAiBK,QALnC,WACID,EAAiBD,IAIjB,SACQ,6BAAKA,EAAMG,WAAWC,SCJtCC,IAASC,YAAcC,EAAQ,IAAqDC,QAGpF,IACMC,EAASC,YAAc,CACzBC,YAFgB,iGAKL,SAASC,EAAIC,GACxB,IAAMC,EAAcD,EAAME,KADK,EAKHC,mBAAS,CAACC,IAF1B,KAEoCC,IADpC,OAJmB,mBAKxBC,EALwB,KAKhBC,EALgB,OAOPJ,mBAAS,IAPF,mBAOxBK,EAPwB,KAOlBC,EAPkB,OASLN,wBAASO,GATJ,mBASxBvB,EATwB,KASjBwB,EATiB,KAmB/B,SAASC,EAAYzB,GACjBwB,EAASxB,GACTsB,EAAQ,IACRF,EAAUpB,EAAM0B,SAASC,aAqB7B,OACI,0BAAS9B,UAAU,MAAnB,UACI,sBAAKA,UAAU,sBAAf,UACI,oBAAIA,UAAU,YAAd,SAIQiB,EAAYc,SAASC,KAAI,SAACC,EAASC,GAC/B,OAAO,cAAChC,EAAD,CAAOC,MAAO8B,EAEP7B,iBAAkBwB,GADbM,QAM/B,cAAC,IAAD,CAAMlC,UAAU,YAAYC,GAAIH,EAAhC,uEAEJ,eAACc,EAAD,CAEIuB,MAAM,qCACNb,OAAQA,EACRE,KAAM,CAACA,GACPY,aAAc,CACV,MAAS,IANjB,UASI,cAAC,IAAD,CACIlB,KACID,EAEJoB,aAAc,CAAEC,WAAY,WAC5BC,YAAa,CACT,eAAgB,UAChB,iBAAkB,GAClB,gBAAiB,GAErBC,cAAe,SAACC,GAASA,EAAIC,iBArD7C,SAA2BD,GAcvBb,EAZiB,CACbe,KAAM,UACNd,SAAU,CACNc,KAAM,QACNb,YAAa,CAACW,EAAIG,OAAOxB,IAAKqB,EAAIG,OAAOvB,MAE7Cf,WAAY,CACRC,KAAMkC,EAAIV,SAAS,GAAGzB,WAAWC,KACjCsC,OAAQJ,EAAIV,SAAS,GAAGzB,WAAWuC,UA2CgBC,CAAkBL,MAIpEtC,GACG,cAAC,IAAD,CAAsB2B,YAAa3B,EAAM0B,SAASC,YAAlD,SACI,sBAAK9B,UAAU,aAAf,UACI,wBAAQK,QA1EhC,WACQF,GACAwB,OAASD,IAwEoC1B,UAAU,qBACvC,oBAAIA,UAAU,mBAAd,SAAkCG,EAAMG,WAAWC,WAH/CJ,EAAM4C,U,YCzEvBC,MAnBf,WACI,OACI,cAAC,IAAD,UACI,qBAAKhD,UAAU,OAAf,SACI,eAAC,IAAD,WAEI,cAAC,IAAD,CAAOiD,OAAK,EAACC,KAAMpD,EAAnB,SACI,cAACC,EAAD,MAGJ,cAAC,IAAD,CAAOmD,KAAMpD,EAAb,SACI,cAACiB,EAAD,CAAKG,KAAQA,cCPtBiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cd0c19b6.chunk.js","sourcesContent":["export const ROUTES_MAP = {\n    MAIN : '/',\n    MAP : '/map',\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ROUTES_MAP } from \"../utils/routesMap\";\n\nexport default function Main() {\n    return (\n        <main className='main'>\n            <h1 className='main__title'>Туристические точки притяжения Калиниграда</h1>\n            <Link to={ROUTES_MAP.MAP} className='main__link'>Перейти к карте</Link>\n        </main>\n    )\n}","import React from 'react';\n\nexport default function Place({place, handlePlaceClick}) {\n\n    /*При клике на элемент из списка мест соответствующее место записывается в переменную состояния place\n    * и происходит переход к выбранному месту на карте*/\n    function handleClick() {\n        handlePlaceClick(place);\n    }\n\n    return (\n        <li className='map__list-item' onClick={handleClick}>\n                <h3>{place.properties.name}</h3>\n        </li>\n    )\n}","import React, {useState} from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport ReactMapboxGl, { GeoJSONLayer, Popup } from \"react-mapbox-gl\";\nimport Place from \"./Place\";\nimport {Link} from 'react-router-dom';\nimport {ROUTES_MAP} from \"../utils/routesMap\";\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nmapboxgl.workerClass = require(\"worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker\").default;\n\n//токен, необходимый для работы с mapbox\nconst accessToken = 'pk.eyJ1Ijoic2FuaXNpbW92IiwiYSI6ImNra2Jsb3h2MTAzbmszMXFzeDZzNXUyZWoifQ.dq9YuV8GpDbbv8B4btLRTA';\nconst Mapbox = ReactMapboxGl({\n    accessToken: accessToken,\n});\n/*Компонент, включающий в себя список мест из файла points.json и Mapbox-карту*/\nexport default function Map(props) {\n    const geojsondata = props.data;\n    /*Координаты Калининграда, чтобы центрировать карту*/\n    const lng = 20.5;\n    const lat = 54.7;\n    const [center, setCenter] = useState({lng: lng, lat: lat});\n    /*Увеличение карты*/\n    const [zoom, setZoom] = useState(12);\n    /*Стейт place – место, на которое кликнул пользователь*/\n    const [place, setPlace] = useState(undefined);\n\n    /*Функция для закрытия попапа – меняет состояние переменной place на undefined*/\n    function closePopup() {\n        if (place) {\n            setPlace(undefined);\n        }\n    }\n\n    /*Функция для приближения к выбранному месту*/\n    function centerPlace(place) {\n        setPlace(place); /*Переменная place теперь содержит данные о выбранном месте*/\n        setZoom(15); /*Карта приближается к выбранному месту*/\n        setCenter(place.geometry.coordinates); /*Карта центрируется по координатам выбранного места*/\n    }\n\n    /*Функция, которая нужна для обработки клика по точке на карте*/\n    function handleMarkerClick(evt) {\n        /*создаётся объект, содержащий данные о точке на карте, на которую кликнул пользователь*/\n        const newPlace = {\n            type: 'Feature',\n            geometry: {\n                type: 'Point',\n                coordinates: [evt.lngLat.lng, evt.lngLat.lat]\n            },\n            properties: {\n                name: evt.features[0].properties.name,\n                rating: evt.features[0].properties.rating\n            }\n        }\n        /*карта центрируется по выбранному месту*/\n        centerPlace(newPlace);\n    }\n\n    return (\n        <section className='map'>\n            <div className='map__list-container'>\n                <ul className='map__list'>\n                    {\n                        /*для каждого места из points.json создаётся элемент списка,\n                        содержащий данные о месте*/\n                        geojsondata.features.map((feature, i) => {\n                            return <Place place={feature}\n                                          key={i}\n                                          handlePlaceClick={centerPlace} />\n                        })\n                    }\n                </ul>\n                {/*Кнопка для возвращения на экран с кнопкой \"перейти к карте\"*/}\n                <Link className='map__link' to={ROUTES_MAP.MAIN}>Вернуться</Link>\n            </div>\n            <Mapbox\n                // eslint-disable-next-line\n                style=\"mapbox://styles/mapbox/streets-v11\"\n                center={center}\n                zoom={[zoom]}\n                flyToOptions={{\n                    'speed': 0.4\n                }}\n            >\n                <GeoJSONLayer\n                    data={\n                        geojsondata\n                    }\n                    circleLayout={{ visibility: 'visible' }}\n                    circlePaint={{\n                        \"circle-color\": \"#CD2D24\",\n                        \"circle-opacity\": 0.7,\n                        \"circle-radius\": 8\n                    }}\n                    circleOnClick={(evt) => {evt.preventDefault(); handleMarkerClick(evt)}}\n                />\n                {/*Если в переменной состояния place записано место,\n                то создаётся попап, содержащий данные об этом месте*/}\n                {place && (\n                    <Popup key={place.id} coordinates={place.geometry.coordinates}>\n                        <div className='map__popup'>\n                            <button onClick={closePopup} className='map__popup-close' />\n                            <h3 className='map__popup-title'>{place.properties.name}</h3>\n                        </div>\n                    </Popup>\n                )}\n            </Mapbox>\n        </section>\n    )\n}","import React from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport Main from './Main';\nimport Map from \"./Map\";\nimport {ROUTES_MAP} from '../utils/routesMap';\nimport data from '../data/points.json';\n\n/*Основной компонент приложения*/\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div className='page'>\n                <Switch>\n                    {/*Страница с кнопкой \"Перейти к карте\"*/}\n                    <Route exact path={ROUTES_MAP.MAIN}>\n                        <Main />\n                    </Route>\n                    {/*Страница с картой, тут же передаются данные из файла points.json*/}\n                    <Route path={ROUTES_MAP.MAP}>\n                        <Map data = {data}  />\n                    </Route>\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}